// Configuration file for RNA-seq Nextflow pipeline ////////////////////////////

// Run-specific variables //////////////////////////////////////////////////////
// Full path to input tab-delimited file describing FASTQ files
params.infile = "/usr2/collab/dulrich/development/RNA_Seq_Op/this_tsv_file.tsv"
// Path to Nextflow run directory
params.output_dir = "/rprojectnb/pulmseq/daupipe/OUTPUT_SM"
// Prefix used to label output files when running against the file system
// or as the job run label to help identify this nextflow run in the Operend system
params.prefix = "MCL2_YEAH_REALLY"
params.job_type_name="CBM_RNASeq"
params.opapi_base_url="http://operend.bu.edu/api"
params.opapi_verify_https="false"
params.opapi_storage_location="dev-one"
params.seq_read_set_name="MCL2"
params.tmp_workfile_dir="/rprojectnb/pulmseq/daupipe/PLINE_SCRATCH_SM"
params.source_operend=false
// Genomic parameters
// Set as specified below, depending on the species being analyzed
params.genome = [
  species: "Homo sapiens",  // "Homo sapiens" or "Mus musculus"
  ucsc: "hg19",     // "hg19"         or "mm10"
  grc: "GRCh37",      // "GRCh37"       or "GRCm38"
  ensembl: 75      // 75             or 92
]

// Global variables that may be changed as needed (rare) ///////////////////////

// Attributes for calls to biomaRt in process createSE
params.createSE = [
  biomart_attributes: [
    gene: [
      "ensembl_gene_id",
      "gene_biotype", "description", "band", "transcript_count",
      (params.genome.species == "Homo sapiens") ? "hgnc_symbol" :
        (params.genome.species == "Mus musculus") ? "mgi_symbol" :
        "external_gene_name",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_name" : "external_gene_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_source" : "external_gene_db",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 96) ?
        "entrezgene_id" : "entrezgene"
    ],
    isoform: [
      "ensembl_transcript_id", "ensembl_gene_id",
      "gene_biotype", "transcript_biotype", "description", "band",
      (params.genome.species == "Homo sapiens") ? "hgnc_symbol" :
        (params.genome.species == "Mus musculus") ? "mgi_symbol" :
        "external_gene_name",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_name" : "external_gene_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_source" : "external_gene_db",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 96) ?
        "entrezgene_id" : "entrezgene",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_transcript_name" : "external_transcript_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_transcript_source_name" : "transcript_db_name"
    ]
  ]
]

params.read_length = 75
params.paired_end = true
params.stranded = true

// Other global variables; do not edit unless necessary! ///////////////////////

// Paths
CBMHIVE_PATH = "/restricted/projectnb/cbmhive"
REF_PATH = "${CBMHIVE_PATH}/references"

// URLs
ENSEMBL_BASE_URL = "ftp://ftp.ensembl.org/pub"

// Module versions
params.modules = [
  fastqc:   "fastqc/0.11.7",
  gatk:     "gatk/3.8-1",
  htslib:   "htslib/1.9",
  java:     "java/10.0.2",
  multiqc:  "multiqc/1.6",
  picard:   "picard/2.18.11",
  python2:  "python2/2.7.16",
  python3:  "python3/3.6.5",
  R:        "R/3.6.0",
  rsem:     "rsem/1.3.1",
  rseqc:    "rseqc/3.0.0",
  samtools: "samtools/1.9",
  star:     "star/2.6.0c"
]

// Database builds
RSEM_PREFIX =
  "${params.genome.species.replaceAll(" ","_")}" +
  "." + "${params.genome.grc}.${params.genome.ensembl}"
params.RSEM = [
  reference: new File(
    "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
    "base_random/${RSEM_PREFIX}.ucsc.base_random"
  )
]

params.STAR = [
  genomeDir: new File(
    "${REF_PATH}/STAR/${params.modules.star.replace("star/", "")}",
    "ucsc/${params.genome.ucsc}/base_random/"
  ),
  outFilterMultimapNmax: 20,
  limitSjdbInsertNsj: 5000000
]

params.ref_fasta = new File(
  "${REF_PATH}/ucsc/${params.genome.ucsc}/base_random/${params.genome.ucsc}.fa"
)
params.gene_gtf = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.gtf"
)
params.gene_bed = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.bed"
)

// Infer project used for SGE cluster from path of input file
PROJECT = params.output_dir.
  replaceAll(/^\/(restricted\/|r)?project(nb2?)?\//, "").split("/")[0]
// SGE qsub flags
UNIVERSAL_QFLAGS = "-V -P ${PROJECT} -l scratch=10G"
DEFAULT_QFLAGS = "${UNIVERSAL_QFLAGS} -l h_rt=24:00:00"
LONGRUN_QFLAGS = "${UNIVERSAL_QFLAGS} -l h_rt=48:00:00"

// The default concurrency limit on SCC is 1000 slots

singularity {
    enabled = true
    autoMounts = true
  }
process {
  // Cluster parameters across all processes
  // All processes are run in scratch space to reduce load on GPFS
  scratch = true
  // No sense in terminating the entire pipeline if one job crashes
  errorStrategy = 'terminate'
  withName: postResults{
    container = 'library://operend/libs/opyrnd.sif'
    containerOptions= "--bind /rprojectnb/pulmseq:/rprojectnb/pulmseq"
  }
  withName: createTSV{
    container = 'library://operend/libs/opyrnd.sif'
    containerOptions= "--bind /rprojectnb/pulmseq:/rprojectnb/pulmseq"
  }
  // Cluster parameters specific to each process
  withName: createSE {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runFastQC {
    executor = 'sge'
    clusterOptions =
      "${DEFAULT_QFLAGS} -l mem_total=1G -pe omp ${params.paired_end ? 2 : 1}"
  }
  withName: runMultiQCFastq {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCSample {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runRSEM {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runRSeQC_bam_stat {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_clipping_profile {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_deletion_profile {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_geneBody_coverage {
    executor = 'sge'
    clusterOptions = "${LONGRUN_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_infer_experiment {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_inner_distance {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_insertion_profile {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_annotation {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_saturation {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_distribution {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_duplication {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_GC {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_NVC {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_quality {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_tin {
    executor = 'sge'
    clusterOptions = "${LONGRUN_QFLAGS} -l mem_total=125G"
  }
  withName: runSTAR1pass {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runSTAR2pass {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runSTARgenomeGenerate {
    executor = 'sge'
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
}
