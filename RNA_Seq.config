// List of parameters that can be passed to this workflow

// Paths
CBMHIVE_PATH = "/restricted/projectnb/cbmhive"
REF_PATH = "${CBMHIVE_PATH}/references"
SCRIPT_PATH = "${CBMHIVE_PATH}/Nextflow"

// Global parameters
params.infile = ""
params.infile_header = true
params.output_dir = ""
params.prefix = ""

params.read_length = 75
params.paired_end = true
params.stranded = true

// Genomic parameters
// These may be, for example:
//
// params.genome = [
//   species: "Homo sapiens",
//   ucsc: "hg38",
//   grc: "GRCh38",
//   ensembl: 92
// ]
// 
// params.genome = [
//   species: "Mus musculus",
//   ucsc: "mm10",
//   grc: "GRCm38",
//   ensembl: 92
// ]

// URLs
ENSEMBL_BASE_URL = "ftp://ftp.ensembl.org/pub"

// Module versions
params.modules = [
  fastqc:   "fastqc/0.11.7",
  gatk:     "gatk/3.8-1",
  htslib:   "htslib/1.9",
  java:     "java/10.0.2",
  multiqc:  "multiqc/1.6",
  picard:   "picard/2.18.11",
  python2:  "python2/2.7.16",
  python3:  "python3/3.6.5",
  R:        "R/3.6.0",
  rsem:     "rsem/1.3.1",
  rseqc:    "rseqc/3.0.0",
  samtools: "samtools/1.9",
  star:     "star/2.6.0c"
]

// Database builds
RSEM_PREFIX =
  "${params.genome.species.replaceAll(" ","_")}" +
  "." + "${params.genome.grc}.${params.genome.ensembl}"
params.RSEM = [
  reference: new File(
    "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
    "base_random/${RSEM_PREFIX}.ucsc.base_random"
  )
]

params.STAR = [
  genomeDir: new File(
    "${REF_PATH}/STAR/${params.modules.star.replace("star/", "")}",
    "ucsc/${params.genome.ucsc}/base_random/"
  ),
  outFilterMultimapNmax: 20,
  limitSjdbInsertNsj: 5000000
]

params.ref_fasta = new File(
  "${REF_PATH}/ucsc/${params.genome.ucsc}/base_random/${params.genome.ucsc}.fa"
)
params.gene_gtf = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.gtf"
)
params.gene_bed = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.bed"
)

// Attributes for calls to biomaRt in process createSE
// For newer biomaRt calls:
//   "external_gene_id-> "external_gene_name"
//   "external_gene_db-> "external_gene_source"
//   "external_transcript_id-> "external_transcript_name"
//   "transcript_db_name" -> "external_transcript_source_name"
//   "entrezgene" -> "entrezgene_id"

params.createSE = [
  biomart_attributes: [
    gene: [
      "ensembl_gene_id",
      "hgnc_symbol", "gene_biotype",
      "description", "band",
      "external_gene_id", "external_gene_db",
      "transcript_count",
      "entrezgene"
    ],
    isoform: [
      "ensembl_transcript_id", "ensembl_gene_id",
      "hgnc_symbol", "gene_biotype", "transcript_biotype",
      "description", "band",
      "external_gene_id", "external_gene_db",
      "external_transcript_id", "transcript_db_name",
      "entrezgene"
    ]
  ]
]

// Infer project used for SGE cluster from path of input file
PROJECT = params.output_dir.split("/")[3]
// Default SGE qsub flags
DEFAULT_QFLAGS = "-V -P ${PROJECT} -l h_rt=24:00:00 -l scratch=10G"

// The default concurrency limit on SCC is 1000 slots
executor {
  name = 'sge'
  queueSize = 1000
}

process {
  // Cluster parameters across all processes
  // All processes are run in scratch space to reduce load on GPFS
  scratch = true
  // No sense in terminating the entire pipeline if one job crashes
  errorStrategy = 'finish'

  // Cluster parameters specific to each process
  withName: createSE {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runFastQC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCFastq {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCSample {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runRSEM {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runRSeQC_bam_stat {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_clipping_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_deletion_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_geneBody_coverage {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_infer_experiment {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_inner_distance {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_insertion_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_annotation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_saturation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_distribution {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_duplication {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_GC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_NVC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_quality {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_tin {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runSTAR1pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runSTAR2pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runSTARgenomeGenerate {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
}
